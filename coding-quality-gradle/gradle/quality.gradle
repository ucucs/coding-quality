apply plugin: "pmd"
apply plugin: "jacoco"
apply plugin: "checkstyle"

def exclude = [
        // ignore file pattern
        //'**/R.class',
]

/**
 * Generates Pmd reports based off the source code.
 */
task pmd(type: Pmd) {
    group "Reporting"
    description "Generate Pmd reports."

    reports {
        xml.enabled = false
        html.enabled = true
    }
    source = files(["src/main/java"])
    classpath = files()
    ruleSetFiles = files("${project.rootDir}/config/pmd/pmd.xml")
}

/**
 * Generates Jacoco coverage reports based off the unit tests.
 */
task jacocoReport(type: JacocoReport) {
    group "Reporting"
    description "Generate Jacoco coverage reports."

    reports {
        xml.enabled = false
        html.enabled = true
    }
    sourceDirectories = files(["src/main/java"])
    classDirectories = (file("$project.buildDir/intermediates/classes/debug").exists()
            ? fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: exclude)
            : fileTree(dir: "$project.buildDir/classes", excludes: exclude))
    executionData = fileTree(dir: "$project.buildDir", includes: ["jacoco/*.exec"])
}

/**
 * Generates Checkstyle reports based off the source code.
 */
task checkstyle(type: Checkstyle) {
    group "Reporting"
    description "Generate Checkstyle reports."

    reports.html.enabled = true
    showViolations true
    source "src/main/java"
    classpath = files()
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
}

afterEvaluate {
    tasks.findByName("check").dependsOn("pmd", "checkstyle", "jacocoReport")
}
